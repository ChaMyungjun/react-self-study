let Koa,Router,bodyParser,mongoose,api,jwtMiddleware,createFakeData;_74a‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_74a‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_74a‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_74a‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_74a‍.w("./api",[["default",["api"],function(v){api=v}]]);_74a‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);_74a‍.w("./createFakeData",[["default",["createFakeData"],function(v){createFakeData=v}]]);require('dotenv').config();









//비구조화 할당을 통해 process.env 내부 값에 대한 래퍼런스 만들기
const { PORT } = process.env;

mongoose
  .connect('mongodb://localhost:27017/blog', { useNewUrl: true, useFindAndModify: false})
  .then(() => {
    console.log('Connect success');
    createFakeData();
  })
  .catch(e => {
    _74a‍.g.console.error(e);
  });

const app = new Koa();
const router = new Router();

//라우트 설정
router.use('/api', api.routes()); //api 라우트 적용

//라우터 적용 전에 bodyParser적용
app.use(bodyParser());
app.use(jwtMiddleware);

//app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

//PORT가 지정되어 있지 않으면 4000번 포트 사용
const port = PORT || 4000;
app.listen(port, () => {
  _74a‍.g.console.log('Listening to port %d', port);
});
